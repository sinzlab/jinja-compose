#!/usr/bin/env python
import argparse
import yaml
import json
import sys
import re
import subprocess
import os

class MyDumper(yaml.Dumper):
    def increase_indent(self, flow=False, indentless=False):
        return super(MyDumper, self).increase_indent(flow, False)

def split_by_commas(s):
    return s.split(',')

def pretty(d, indent, result=""):
    if isinstance(d, dict):
        for key, value in d.items():
            result += " " * indent + str(key) + ": "
            if isinstance(value, dict):
                result = pretty(value, indent + 2, result + "\n")
            elif isinstance(value, list):
                result = pretty(value, indent + 2, result + "\n")
            else:
                result += str(value) + "\n"
    elif isinstance(d, list):
        for value in d:
            result += " " * indent + "- "
            if isinstance(value, dict):
                result = pretty(value, indent + 2, result + "\n")
            elif isinstance(value, list):
                result = pretty(value, indent + 2, result + "\n")
            else:
                result += str(value) + "\n"

    return result

# support Python 2 or 3
if sys.version_info[0] == 3:
    file_error = FileNotFoundError
else:
    file_error = IOError


def filehandle_if_exists_else_none(fname):
    try:
        return open(fname, 'r')
    except file_error:
        return None


def open_compose_file(fname):
    if not fname:
        return filehandle_if_exists_else_none('docker-compose.yaml') \
            or filehandle_if_exists_else_none('docker-compose.yml')
    else:
        return filehandle_if_exists_else_none(fname)


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', metavar='INPUT_FILE', type=open_compose_file,
                    default='',
                    help='Specify an alternate input compose file')
parser.add_argument('-t', '--template', type=argparse.FileType('r'),
                    help='Specify Jinja2 template file from which compose file will be generated. '
                         '--template argument discards --file argument.')
parser.add_argument('-o', '--output', metavar='OUTPUT_FILE', type=argparse.FileType('w'),
                    default='jinja-compose.yml',
                    help='Specify an alternate output compose file (default: jinja-compose.yml')
parser.add_argument('-G', '--generate', action='store_true',
                    help='Generate output compose file and exit, do not run docker-compose')

(args, extras) = parser.parse_known_args()

if args.file is None and args.template is None:
    print('Missing docker-compose file.')
    sys.exit(1)

if args.template is not None:
    template = args.template.read()
else:
    template = args.file.read()

from jinja2 import Template, Environment
env = Environment(line_comment_prefix='#')
env.filters['pretty'] = pretty

T1 = env.from_string(template)
first_pass = T1.render(split_by_commas=split_by_commas, **os.environ)

config = yaml.load(first_pass, Loader=yaml.FullLoader)

if config is None:
    raise RuntimeError('Compose file is empty')

yaml.dump(config, args.output, default_flow_style=False, Dumper=MyDumper)

if not args.generate:
    from compose.cli.main import main as compose_main
    sys.argv[:] = ['docker-compose', '-f', args.output.name] + extras
    compose_main()
